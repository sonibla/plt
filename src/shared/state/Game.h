// Generated by dia2code
#ifndef STATE__GAME__H
#define STATE__GAME__H

#include <memory>
#include <vector>

namespace state {
  class Game;
  class Battlefield;
  class Stack;
  class Exile;
};
namespace turn {
  class Turn;
};
namespace state {
  class Player;
  class IObservable;
}

#include "Battlefield.h"
#include "Stack.h"
#include "Exile.h"
#include "turn/Turn.h"
#include "Player.h"
#include "IObservable.h"

namespace state {

  /// class Game - 
  class Game : public state::IObservable {
    // Attributes
  private:
    static std::shared_ptr<Game> instance;
    std::shared_ptr<Battlefield> battlefield;
    std::shared_ptr<Stack> stack;
    std::shared_ptr<Exile> exile;
    std::unique_ptr<turn::Turn> turn;
    /// Si possible renvoyer les joueurs en mettant le joueur actif a l'index 0
    std::vector<std::shared_ptr<Player>> players;
    // Operations
  public:
    static std::weak_ptr<Game> GetInstance ();
    void NextTurn (std::weak_ptr<Player> activePlayer);
    std::weak_ptr<Battlefield> GetBattlefield ();
    std::weak_ptr<Stack> GetStack ();
    std::weak_ptr<Exile> GetExile ();
    std::vector<std::weak_ptr<Player>> GetPlayers ();
    void SetPlayers ( std::vector<std::shared_ptr<Player>> players);
    Game ();
    ~Game ();
    // Setters and Getters
  };

};

#endif
